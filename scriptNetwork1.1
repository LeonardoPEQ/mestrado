import numpy as np
import openpnm as op
import matplotlib.pyplot as plt
import time
op.visualization.set_mpl_style()
np.random.seed(54356457)  # Configurar o gerador de numeros aleatorios para reprodutibilidade
np.set_printoptions(precision=8)

# Iniciar a medicao do tempo
start_time = time.time()

###                         Geracao da rede porosa                         ###
pn = op.network.Cubic(shape=[11, 10, 10], spacing=1e-4)
pn_geometry = op.models.collections.geometry.spheres_and_cylinders
pn.add_model_collection(pn_geometry)
pn.regenerate_models()

###                            Calculo de raios                            ###
# Parametros para Network 1.1
r_t_min = 0.1e-6
r_t_max = 10e-6
gamma = 12
delta = 0.2

# Distribuicao dos raios das gargantas
def throat_distribution(x, r_t_min, r_t_max, delta, gamma):
    return (r_t_max - r_t_min) * (-delta * np.log(x * (1 - np.exp(-1/delta)) + np.exp(-1/delta)))**(1/gamma) + r_t_min


for i in range(len(pn['throat.diameter'])):
    x = np.random.rand()
    pn['throat.diameter'][i] = throat_distribution(x, r_t_min, r_t_max, delta, gamma)
    pn.regenerate_models()

# Raios dos poros
for i in range(len(pn['pore.diameter'])):
    # Encontrar o maior diametro das conexoes adjacentes a um poro
    neighbor = pn.find_neighbor_throats([i])  # neighbor é uma lista
    neighbor_max_value = 0
    for j in neighbor:
        if pn['throat.diameter'][j] > neighbor_max_value:
            neighbor_max_value = pn['throat.diameter'][j]
            pn['pore.diameter'][i] = neighbor_max_value
            pn.regenerate_models()

drop = op.topotools.reduce_coordination(pn, z=5)  # Reduce connectivity but ensure z > 1
op.topotools.trim(network=pn, throats=drop)
pn.regenerate_models()

###                       Calculo da permeabilidade                        ###

# Criar objeto de fase (agua liquida)
water = op.phase.Water(network=pn)

# Calculo da condutancia hidraulica para conexoes cilindricas
R = pn['throat.diameter'] / 2
L_network = pn['throat.length']
mu = 0.00089
water['throat.hydraulic_conductance'] = np.pi * R**4 / (8 * mu * L_network)

water.add_model_collection(op.models.collections.physics.basic)
water.regenerate_models()

# Fluxo de Stokes (direcao x)
inlet = pn.pores('left')
outlet = pn.pores('right')
flow = op.algorithms.StokesFlow(network=pn, phase=water)
flow.set_value_BC(pores=inlet, values=1)
flow.set_value_BC(pores=outlet, values=0)
flow.run()
water.update(flow.soln)

# Calculo da permeabilidade
Q = flow.rate(pores=inlet, mode='group')[0]
A = op.topotools.get_domain_area(pn, inlets=inlet, outlets=outlet)
L_domain = op.topotools.get_domain_length(pn, inlets=inlet, outlets=outlet)
K = Q * L_domain * mu / A

###                             Saida                                      ###
# Plotando as distribuicoes
plt.hist(pn['pore.diameter'] * 1e6 * 0.5, bins=50, edgecolor='k', alpha=0.7, label='Raio dos poros (µm)')
plt.hist(pn['throat.diameter'] * 1e6 * 0.5, bins=50, edgecolor='k', alpha=0.7, label='Raio das conexões (µm)')
plt.xlabel('Diâmetro (µm)')
plt.ylabel('Frequência')
plt.legend()
plt.show()

ax = op.visualization.plot_connections(pn)
ax = op.visualization.plot_coordinates(pn, ax=ax)

# Finalizar medicao do tempo
end_time = time.time()
execution_time = end_time - start_time
print(f'Tempo de execução: {execution_time:.2f} segundos')

# Exibir permeabilidade
print(f'Para o tamanho da rede de: {L_domain * 1e6} µm, o valor de K é: {K} m²')


